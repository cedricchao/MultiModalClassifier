# -*- coding: utf-8 -*-
"""258HW2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1fzNzX6wC2E2_xAMP8tBky4ExP_ASxlf6
"""

import matplotlib.pyplot as plt
import pandas as pd

# CNN Model 1
train_data = [
    [0.6812, 0.5690],
    [0.6627, 0.6105],
    [0.6609, 0.5940],
    [0.6473, 0.6260],
    [0.6410, 0.6365],
    [0.6321, 0.6450],
    [0.6127, 0.6695],
    [0.6280, 0.6535],
    [0.6152, 0.6630],
    [0.5980, 0.6820],
    [0.5980, 0.6790],
    [0.6044, 0.6700],
    [0.6005, 0.6820],
    [0.5778, 0.6880],
    [0.5758, 0.6950],
    [0.5681, 0.7035],
    [0.5817, 0.6940],
    [0.5767, 0.6990],
    [0.5684, 0.7080],
    [0.5659, 0.6925],
    [0.5506, 0.7245],
    [0.5543, 0.7180],
    [0.5537, 0.7145],
    [0.5434, 0.7180],
    [0.5432, 0.7155],
    [0.5315, 0.7330],
    [0.5452, 0.7315],
    [0.5320, 0.7390],
    [0.5128, 0.7445],
    [0.5295, 0.7270],
    [0.5021, 0.7515],
    [0.5180, 0.7350],
    [0.5213, 0.7300],
    [0.4925, 0.7655],
    [0.4915, 0.7580],
    [0.5007, 0.7485],
    [0.5025, 0.7605],
    [0.4966, 0.7605],
    [0.4940, 0.7545]
]
val_data = [
    [0.6572, 0.6360],
    [0.6253, 0.6620],
    [0.6312, 0.6660],
    [0.6679, 0.5970],
    [0.6027, 0.6950],
    [0.5955, 0.6830],
    [0.5801, 0.7020],
    [0.5899, 0.6940],
    [0.5684, 0.7050],
    [0.5735, 0.6970],
    [0.5841, 0.6760],
    [0.5957, 0.6780],
    [0.5670, 0.7120],
    [0.5487, 0.7120],
    [0.5528, 0.7130],
    [0.5824, 0.7000],
    [0.5565, 0.7080],
    [0.5497, 0.7130],
    [0.5410, 0.7230],
    [0.5363, 0.7250],
    [0.5308, 0.7350],
    [0.5519, 0.7180],
    [0.5329, 0.7280],
    [0.5401, 0.7130],
    [0.5798, 0.7160],
    [0.5443, 0.7250],
    [0.5214, 0.7440],
    [0.5208, 0.7430],
    [0.5306, 0.7290],
    [0.5420, 0.7350],
    [0.5163, 0.7470],
    [0.5246, 0.7360],
    [0.5175, 0.7420],
    [0.5141, 0.7400],
    [0.5181, 0.7450],
    [0.5143, 0.7430],
    [0.5187, 0.7470],
    [0.5163, 0.7490],
    [0.5219, 0.7430]
]

# Create DataFrame
epochs = list(range(1, 40))
train_df = pd.DataFrame(train_data, columns=['Loss', 'Accuracy'], index=epochs)
val_df = pd.DataFrame(val_data, columns=['Loss', 'Accuracy'], index=epochs)

# Plotting
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_df['Loss'], label='Training Loss')
plt.plot(val_df['Loss'], label='Validation Loss')
plt.title('Training and Validation Loss for CNNModel1')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_df['Accuracy'], label='Training Accuracy')
plt.plot(val_df['Accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy for CNNModel1')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# model 2: MLP Model 1
train_data = [
    [0.6953, 0.5675],
    [0.6887, 0.5765],
    [0.6781, 0.5690],
    [0.6903, 0.5625],
    [0.6804, 0.5715],
    [0.6706, 0.5810],
    [0.6683, 0.5905],
    [0.6630, 0.5945],
    [0.6631, 0.6040],
    [0.6518, 0.6155],
    [0.6680, 0.5870],
    [0.6562, 0.6010],
    [0.6582, 0.6055],
    [0.6525, 0.6110],
    [0.6585, 0.5920],
    [0.6479, 0.6080],
    [0.6585, 0.5995],
    [0.6578, 0.5970],
    [0.6452, 0.6090],
    [0.6472, 0.6200],
    [0.6397, 0.6195],
    [0.6359, 0.6245],
    [0.6473, 0.6225],
    [0.6470, 0.6160],
    [0.6478, 0.6235],
    [0.6382, 0.6205],
    [0.6328, 0.6260],
    [0.6461, 0.6165],
    [0.6461, 0.6290],
    [0.6430, 0.6250],
    [0.6276, 0.6385],
    [0.6342, 0.6195],
    [0.6301, 0.6385],
    [0.6300, 0.6340],
    [0.6203, 0.6340],
    [0.6195, 0.6445],
    [0.6175, 0.6555],
    [0.6211, 0.6385],
    [0.6213, 0.6515]
]

val_data = [
    [0.6868, 0.5530],
    [0.6805, 0.5770],
    [0.6832, 0.5780],
    [0.6674, 0.6070],
    [0.6640, 0.6000],
    [0.6657, 0.5860],
    [0.6621, 0.5990],
    [0.6519, 0.6080],
    [0.6550, 0.6030],
    [0.6525, 0.6060],
    [0.6466, 0.5950],
    [0.6440, 0.6140],
    [0.6528, 0.6040],
    [0.6606, 0.5840],
    [0.6525, 0.6160],
    [0.6419, 0.6240],
    [0.6445, 0.6200],
    [0.6407, 0.6160],
    [0.6514, 0.6080],
    [0.6485, 0.6050],
    [0.6552, 0.6080],
    [0.6482, 0.6330],
    [0.6545, 0.6170],
    [0.6378, 0.6160],
    [0.6542, 0.6120],
    [0.6353, 0.6350],
    [0.6413, 0.6300],
    [0.6489, 0.6220],
    [0.6408, 0.6190],
    [0.6369, 0.6420],
    [0.6342, 0.6550],
    [0.6309, 0.6360],
    [0.6302, 0.6330],
    [0.6311, 0.6470],
    [0.6311, 0.6560],
    [0.6318, 0.6540],
    [0.6320, 0.6530],
    [0.6315, 0.6460],
    [0.6308, 0.6520]
]

# Create DataFrame
epochs = list(range(1, 40))
train_df = pd.DataFrame(train_data, columns=['Loss', 'Accuracy'], index=epochs)
val_df = pd.DataFrame(val_data, columns=['Loss', 'Accuracy'], index=epochs)

# Plotting
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_df['Loss'], label='Training Loss')
plt.plot(val_df['Loss'], label='Validation Loss')
plt.title('Training and Validation Loss for MLP Model1')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_df['Accuracy'], label='Training Accuracy')
plt.plot(val_df['Accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy for MLP Model1')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# Model 3 alexnet
train_data = [
    [0.6934, 0.5020],
    [0.6916, 0.5215],
    [0.6907, 0.5400],
    [0.6880, 0.5780],
    [0.6888, 0.5735],
    [0.6503, 0.6470],
    [0.6375, 0.6365],
    [0.6330, 0.6435],
    [0.6255, 0.6670],
    [0.6220, 0.6640],
    [0.6235, 0.6455],
    [0.6093, 0.6690],
    [0.6269, 0.6585],
    [0.6100, 0.6660],
    [0.6057, 0.6720],
    [0.5661, 0.7135],
    [0.5658, 0.7115],
    [0.5813, 0.7060],
    [0.5732, 0.7005],
    [0.5663, 0.7035],
    [0.5712, 0.6945],
    [0.5736, 0.7040],
    [0.5669, 0.7080],
    [0.5652, 0.7265],
    [0.5592, 0.7190],
    [0.5606, 0.7095],
    [0.5450, 0.7235],
    [0.5513, 0.7245],
    [0.5584, 0.7080],
    [0.5412, 0.7190],
    [0.5157, 0.7390],
    [0.5172, 0.7400],
    [0.5078, 0.7420],
    [0.5035, 0.7460],
    [0.5085, 0.7530],
    [0.5106, 0.7460],
    [0.5167, 0.7420],
    [0.4977, 0.7520],
    [0.4932, 0.7650]
]
val_data = [
    [0.6921, 0.5030],
    [0.6932, 0.5080],
    [0.6883, 0.5760],
    [0.6696, 0.6020],
    [0.6781, 0.6440],
    [0.6225, 0.6570],
    [0.6116, 0.6790],
    [0.6222, 0.6620],
    [0.6120, 0.6500],
    [0.6233, 0.6290],
    [0.5829, 0.7120],
    [0.6086, 0.6750],
    [0.6949, 0.5930],
    [0.5838, 0.6940],
    [0.5795, 0.6790],
    [0.5637, 0.7070],
    [0.5596, 0.7050],
    [0.5518, 0.7270],
    [0.5521, 0.7280],
    [0.5314, 0.7420],
    [0.5346, 0.7380],
    [0.5723, 0.7100],
    [0.5371, 0.7310],
    [0.5666, 0.7040],
    [0.5421, 0.7230],
    [0.5318, 0.7360],
    [0.5482, 0.7280],
    [0.5697, 0.6760],
    [0.5435, 0.7240],
    [0.5354, 0.7340],
    [0.5228, 0.7370],
    [0.5269, 0.7390],
    [0.5233, 0.7430],
    [0.5419, 0.7290],
    [0.5210, 0.7410],
    [0.5238, 0.7330],
    [0.5154, 0.7480],
    [0.5226, 0.7390],
    [0.5230, 0.7450]
]
# Create DataFrame
epochs = list(range(1, 40))
train_df = pd.DataFrame(train_data, columns=['Loss', 'Accuracy'], index=epochs)
val_df = pd.DataFrame(val_data, columns=['Loss', 'Accuracy'], index=epochs)

# Plotting
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_df['Loss'], label='Training Loss')
plt.plot(val_df['Loss'], label='Validation Loss')
plt.title('Training and Validation Loss for AlexNet Model1')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_df['Accuracy'], label='Training Accuracy')
plt.plot(val_df['Accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy for AlexNet Model1')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# alex net model2
train_data = [
    (0.6932, 0.5005),
    (0.6932, 0.5000),
    (0.6930, 0.5005),
    (0.6932, 0.4995),
    (0.6932, 0.5000),
    (0.6931, 0.4975),
    (0.6931, 0.4965),
    (0.6931, 0.5000),
    (0.6931, 0.5050),
    (0.6930, 0.5135),
    (0.6932, 0.4920),
    (0.6931, 0.5075),
    (0.6932, 0.5010),
    (0.6931, 0.5090),
    (0.6931, 0.5095),
    (0.6931, 0.5045),
    (0.6931, 0.5120),
    (0.6931, 0.5000),
    (0.6933, 0.4885),
    (0.6931, 0.5165),
    (0.6932, 0.4935),
    (0.6931, 0.4950),
    (0.6932, 0.5020),
    (0.6932, 0.4995),
    (0.6931, 0.5130),
    (0.6931, 0.5085),
    (0.6931, 0.5095),
    (0.6932, 0.4940),
    (0.6931, 0.5040),
    (0.6932, 0.4995),
    (0.6930, 0.5265),
    (0.6933, 0.4770),
    (0.6931, 0.5170),
    (0.6931, 0.5020),
    (0.6932, 0.4880),
    (0.6931, 0.5165),
    (0.6931, 0.5060),
    (0.6931, 0.5015),
    (0.6932, 0.4955)
]

val_data = [
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6932, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.5000),
    (0.6931, 0.4980),
    (0.6931, 0.5000),
    (0.6931, 0.4990),
    (0.6931, 0.4980),
    (0.6931, 0.4890),
    (0.6931, 0.5040),
    (0.6931, 0.4890),
    (0.6931, 0.5350),
    (0.6931, 0.5150),
    (0.6931, 0.4880),
    (0.6931, 0.4840),
    (0.6931, 0.4910),
    (0.6931, 0.4850),
    (0.6931, 0.4910),
    (0.6931, 0.4930),
    (0.6931, 0.4930),
    (0.6931, 0.4920),
    (0.6931, 0.4910),
    (0.6931, 0.4920),
    (0.6931, 0.4920),
    (0.6931, 0.4930),
    (0.6931, 0.4930)
]

# Create DataFrame
epochs = list(range(1, 40))
train_df = pd.DataFrame(train_data, columns=['Loss', 'Accuracy'], index=epochs)
val_df = pd.DataFrame(val_data, columns=['Loss', 'Accuracy'], index=epochs)

# Plotting
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_df['Loss'], label='Training Loss')
plt.plot(val_df['Loss'], label='Validation Loss')
plt.title('Training and Validation Loss for AlexNet Model2')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_df['Accuracy'], label='Training Accuracy')
plt.plot(val_df['Accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy for AlexNet Model2')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()

# alex net model 3
train_data = [
    (0.6961, 0.5075), (0.6915, 0.5065), (0.6849, 0.5745), (0.6577, 0.6195), (0.6451, 0.6240),
    (0.6388, 0.6490), (0.6284, 0.6490), (0.6338, 0.6565), (0.6217, 0.6465), (0.6081, 0.6685),
    (0.5862, 0.6880), (0.5971, 0.6835), (0.5826, 0.6995), (0.5716, 0.7010), (0.5928, 0.6950),
    (0.5716, 0.7125), (0.5864, 0.6895), (0.5662, 0.7150), (0.5597, 0.7155), (0.5639, 0.7195),
    (0.5521, 0.7265), (0.5665, 0.7070), (0.5529, 0.7200), (0.5547, 0.7150), (0.5917, 0.6770),
    (0.5501, 0.7230), (0.5499, 0.7125), (0.5311, 0.7365), (0.5167, 0.7345), (0.4994, 0.7580),
    (0.4902, 0.7500), (0.4884, 0.7680), (0.5039, 0.7475), (0.4933, 0.7610), (0.4876, 0.7595),
    (0.4794, 0.7635), (0.4916, 0.7525), (0.4726, 0.7700), (0.5060, 0.7460)
]
val_data = [
    (0.6929, 0.5000), (0.6860, 0.6140), (0.6715, 0.6130), (0.6443, 0.6460), (0.6465, 0.6330),
    (0.6039, 0.6920), (0.6361, 0.6210), (0.6130, 0.6920), (0.6050, 0.6950), (0.5944, 0.6800),
    (0.5977, 0.7000), (0.5788, 0.6930), (0.5637, 0.7090), (0.6188, 0.6750), (0.5634, 0.7230),
    (0.6307, 0.6580), (0.5606, 0.7160), (0.5559, 0.7210), (0.5793, 0.7050), (0.5527, 0.7140),
    (0.5830, 0.6920), (0.5367, 0.7270), (0.5485, 0.7270), (0.6016, 0.6790), (0.5908, 0.6710),
    (0.5486, 0.7340), (0.5292, 0.7350), (0.5549, 0.7240), (0.5349, 0.7370), (0.5343, 0.7360),
    (0.5402, 0.7360), (0.5379, 0.7380), (0.5273, 0.7400), (0.5307, 0.7380), (0.5333, 0.7430),
    (0.5408, 0.7320), (0.5352, 0.7340), (0.5289, 0.7420), (0.5230, 0.7360)
]

# Create DataFrame
epochs = list(range(1, 40))
train_df = pd.DataFrame(train_data, columns=['Loss', 'Accuracy'], index=epochs)
val_df = pd.DataFrame(val_data, columns=['Loss', 'Accuracy'], index=epochs)

# Plotting
plt.figure(figsize=(14, 6))

plt.subplot(1, 2, 1)
plt.plot(train_df['Loss'], label='Training Loss')
plt.plot(val_df['Loss'], label='Validation Loss')
plt.title('Training and Validation Loss for AlexNet Model3')
plt.xlabel('Epoch')
plt.ylabel('Loss')
plt.legend()

plt.subplot(1, 2, 2)
plt.plot(train_df['Accuracy'], label='Training Accuracy')
plt.plot(val_df['Accuracy'], label='Validation Accuracy')
plt.title('Training and Validation Accuracy for AlexNet Model3')
plt.xlabel('Epoch')
plt.ylabel('Accuracy')
plt.legend()

plt.tight_layout()
plt.show()